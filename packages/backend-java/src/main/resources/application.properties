spring.application.name=demo

server.port=${SERVER_PORT:8081}

# src/main/resources/application.properties
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/mydatabase}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:mysecretpassword}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA 설정
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
# ddl-auto=update: 엔티티 클래스와 DB 테이블을 비교하여 변경 사항을 자동으로 반영 (개발용으로 편리)
# 운영 환경에서는 create, update 대신 validate를 사용하고, Flyway나 Liquibase 같은 DB 마이그레이션 도구 사용을 권장합니다.
